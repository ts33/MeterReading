//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MeterReadings = newMeterReadingsTable("public", "meter_readings", "")

type meterReadingsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Nmi         postgres.ColumnString
	Timestamp   postgres.ColumnTimestamp
	Consumption postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MeterReadingsTable struct {
	meterReadingsTable

	EXCLUDED meterReadingsTable
}

// AS creates new MeterReadingsTable with assigned alias
func (a MeterReadingsTable) AS(alias string) *MeterReadingsTable {
	return newMeterReadingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MeterReadingsTable with assigned schema name
func (a MeterReadingsTable) FromSchema(schemaName string) *MeterReadingsTable {
	return newMeterReadingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MeterReadingsTable with assigned table prefix
func (a MeterReadingsTable) WithPrefix(prefix string) *MeterReadingsTable {
	return newMeterReadingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MeterReadingsTable with assigned table suffix
func (a MeterReadingsTable) WithSuffix(suffix string) *MeterReadingsTable {
	return newMeterReadingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMeterReadingsTable(schemaName, tableName, alias string) *MeterReadingsTable {
	return &MeterReadingsTable{
		meterReadingsTable: newMeterReadingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMeterReadingsTableImpl("", "excluded", ""),
	}
}

func newMeterReadingsTableImpl(schemaName, tableName, alias string) meterReadingsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NmiColumn         = postgres.StringColumn("nmi")
		TimestampColumn   = postgres.TimestampColumn("timestamp")
		ConsumptionColumn = postgres.FloatColumn("consumption")
		allColumns        = postgres.ColumnList{IDColumn, NmiColumn, TimestampColumn, ConsumptionColumn}
		mutableColumns    = postgres.ColumnList{NmiColumn, TimestampColumn, ConsumptionColumn}
	)

	return meterReadingsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Nmi:         NmiColumn,
		Timestamp:   TimestampColumn,
		Consumption: ConsumptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
